/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "sleep.h"
#include "xiic.h"
#include "xil_exception.h"
#include "xil_cache.h"
#include "xaxivdma.h"


#define XPAR_XAXIVDMA_NUM_INSTANCES
#define VDMA_NUM_FSTORES	XPAR_AXIVDMA_0_NUM_FSTORES

#define	VIDEO_BASEADDR		0x80000000//+0x05000000  //bram

/*******************if support gamma lut*************************************/
#ifdef v_gamma_lut_0
#define VGAMMALUT_BASE	XPAR_PROCESSING_SS_V_GAMMA_LUT_0_S_AXI_CTRL_BASEADDR
#endif
/******************** Constant Definitions **********************************/

/*
 * Device related constants. These need to defined as per the HW system.
 */
u32	test;
u32 Data;
/******************** Constant Definitions **********************************/
int main()
{
	init_platform();

    for(int i=0; i<=100;i+=4)
    {
 	 Xil_Out32(0x85000000+i,0x01);
 	 Data = Xil_In32((0x85000000+i));
 	 printf("addr: 0x85000000+%d: %d \r\n",i ,Data);
 	 Data =0x0;
    } //test write to ddr

	Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x030), 0x0000008b); // enable circular mode

	Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x0ac), VIDEO_BASEADDR); // start address

	Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x0b0), VIDEO_BASEADDR+0x00000000); // start address

	Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x0b4), VIDEO_BASEADDR+0x00000000); // start address

	Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x0b8), VIDEO_BASEADDR+0x00000000); // start address
	

	Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x0a8), (1920 * 4)); // h offset (1920 * 4) bytes // you can adjust the frame wdith according your requirment.
	Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x0a4), (1920 * 4)); // h size (1920 * 4)  bytes
	Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x0a0), 1080); // v size 

  xil_printf	("VDMA S2MM Starting OK\n\r"); 
  test = Xil_In32((XPAR_AXI_VDMA_0_BASEADDR + 0x034));
  printf("the S2MM0 status is = %x!!\n\r", test);

  while((test	&	0xfffff)!=0x11000) //wait status of S2MM is correct
  {
    test = Xil_In32((XPAR_AXI_VDMA_0_BASEADDR + 0x034));
    printf("the S2MM0 status is = %x!!\n\r", test);
  }
    sleep(1);
    
//        Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x030), 0x00000004); // enable circular mode
//        //****************************multi-scaler****************************//
//        xil_printf	("Scaler Start\n\r");
//        u32 LineRate;
//        u32 PixeRate;
//        Xil_Out32((0xFF0A0000) + (0x00000018), (u32)(0xFFFF0000));
//        Xil_Out32((0xFF0A0000) + (0x000002C4), (u32)(0xFFFFFFFF));
//        Xil_Out32((0xFF0A0000) + (0x000002C8), (u32)(0xFFFFFFFF));
//        Xil_Out32((0xFF0A0000) + (0x0000004C), (u32)(0x00000001));
//        Xil_Out32((0xFF0A0000) + (0x0000004C), (u32)(0x00000000));
//        Xil_Out32((0xFF0A0000) + (0x0000004C), (u32)(0x00000001));
//
//        Xil_Out32(0x0080060000 + 0x00010,0x01);
//        Xil_Out32(0x0080060000 + 0x00100,1920);
//        Xil_Out32(0x0080060000 + 0x00108,1024);
//        Xil_Out32(0x0080060000 + 0x00118,1080);
//        Xil_Out32(0x0080060000 + 0x00120,768);

//        Xil_Out32(0x0080000000 + 0x00000000,0x01);
//        Xil_Out32(0x0080000000 + 0x00000004,0x02);
//        Xil_Out32(0x0080000000 + 0x00000004,0x02);
//        Xil_Out32(0x0080000000 + 0x00118,600);
//        Xil_Out32(0x0080000000 + 0x00120,600);

//       for(int i=0; i<=100;i+=4)
//       {
//    	   Xil_Out32(0x0080000000+i,0x01);
//    	 Data = Xil_In32((0x0080000000+i));
//    	 printf("addr: 0x0080000000+%d: %d \r\n",i ,Data);
//    	 Data =0;
//       }
//        LineRate = (u32)((float)(1080*65536+ 768/2)/(float)768);
//        PixeRate = (u32)((float)(1920*65536+ 1024/2)/(float)1024);
//        Xil_Out32(0x0080060000 + 0x00128,LineRate);
//        Xil_Out32(0x0080060000 + 0x00130,PixeRate);
//        Xil_Out32(0x0080060000 + 0x00138,10);
//        Xil_Out32(0x0080060000 + 0x00150,10);
//        Xil_Out32(0x0080060000 + 0x00158,1920*4);
//        Xil_Out32(0x0080060000 + 0x00160,1024*4);
//        Xil_Out32(0x0080060000 + 0x00170,VIDEO_BASEADDR);
//        Xil_Out32(0x0080060000 + 0x00190,VIDEO_BASEADDR + 0x30000000);
//        Xil_Out32(0x0080060000 + 0x00200, VIDEO_BASEADDR+0x10000000);
//        Xil_Out32(0x0080060000 + 0x00300, VIDEO_BASEADDR+0x20000000);
//        Xil_Out32((0x0080060000 + 0x0004), 0x01  );
//        Xil_Out32((0x0080060000 + 0x0008), 0x01  );
//        Xil_Out32((0x0080060000 + 0x0000), 0x01  );
//        xil_printf	("Scaler End\n\r");
        //*********************************end********************************//

 // MM2S 

      sleep(1);
              //Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x000), 0x00000000);// framebuffer stop

              Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x000), 0x0000008b); // enable circular mode
              
              Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x05c), VIDEO_BASEADDR+0x0000000); // start address
              Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x060), VIDEO_BASEADDR+0x00000000); // start address
              Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x064), VIDEO_BASEADDR+0x00000000); // start address

              Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x058), (1920 * 4)); // h offset (1920 * 4) bytes
              Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x054), (1920 * 4)); // h size (1920 * 4) bytes
              Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x050), 1080); // v size (1080)

//              Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x000), 0x00000000);
//              Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x000), 0x0000008b);

              //sleep(4);

 //             Xil_Out32((XPAR_AXI_VDMA_0_BASEADDR + 0x000), 0x00000000);// framebuffer stop
 //             printf("framebuffer stop\n\r");
              test	=0x0;
   
   while(test!=0x11000)
   {
              test = Xil_In32((XPAR_AXI_VDMA_0_BASEADDR + 0x004));

              printf("the MM2S status is = %x!!\n\r", test);
   }
              printf("OK\n\r");






    cleanup_platform();


#ifdef v_gamma_lut_0
int gamma_lut_init() {
	XV_gamma_lut gamma_lut;
	XV_gamma_lut_Config *gamma_lut_config;
//XPAR_AXI_VDMA_0_DEVICE_ID
if ( (gamma_lut_config = XV_gamma_lut_LookupConfig(XPAR_V_GAMMA_LUT_0_DEVICE_ID)) == NULL) {
		xil_printf("XV_gamma_lut_LookupConfig() failed\r\n");
		return XST_FAILURE;
	}
	if (XV_gamma_lut_CfgInitialize(&gamma_lut, gamma_lut_config, gamma_lut_config->BaseAddress)) {
		xil_printf("XV_gamma_lut_CfgInitialize() failed\r\n");
		return XST_FAILURE;
	}

	XV_gamma_lut_Set_HwReg_width(&gamma_lut, 1920);
	XV_gamma_lut_Set_HwReg_height(&gamma_lut, 1080);
    XV_gamma_lut_Set_HwReg_video_format(&gamma_lut, 0); // RGB

	if (XV_gamma_lut_Write_HwReg_gamma_lut_0_Words(&gamma_lut, 0, (int *) xgamma10_04,
			sizeof(xgamma10_10)/sizeof(int)) != sizeof(xgamma10_10)/sizeof(int)) {
		xil_printf("Gamma correction LUT write failed\r\n");
		return XST_FAILURE;
	}
	if (XV_gamma_lut_Write_HwReg_gamma_lut_1_Words(&gamma_lut, 0, (int *) xgamma10_04,
			sizeof(xgamma10_10)/sizeof(int)) != sizeof(xgamma10_10)/sizeof(int)) {
		xil_printf("Gamma correction LUT write failed\r\n");
		return XST_FAILURE;
	}
	if (XV_gamma_lut_Write_HwReg_gamma_lut_2_Words(&gamma_lut, 0, (int *) xgamma10_04,
			sizeof(xgamma10_10)/sizeof(int)) != sizeof(xgamma10_10)/sizeof(int)) {
		xil_printf("Gamma correction LUT write failed\r\n");
		return XST_FAILURE;
	}


	printf("GAMMA LUT end\n\r");


	XV_gamma_lut_EnableAutoRestart(&gamma_lut);
	XV_gamma_lut_Start(&gamma_lut);

	xil_printf("Gamma correction LUT initialized\r\n");

	return XST_SUCCESS;
}
#endif

    return 0;
}
